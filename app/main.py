"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞.
"""

import asyncio
import logging
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ConversationHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, Application
from app.core.config import settings
from app.core.scheduler import HabitReminderScheduler
from app.bot.handlers.habits import (
    list_habits,
    create_habit_command,
    complete_habit,
    handle_complete_callback,
    delete_habit,
    handle_delete_callback,
    handle_delete_confirm_callback,
    show_stats,
    test_notifications,
)
from app.bot.handlers.conversation import (
    start_create_habit,
    handle_schedule_type,
    handle_custom_settings,
    handle_habit_name,
    handle_habit_description,
    cancel_create_habit,
    SCHEDULE_TYPE,
    HABIT_NAME,
    HABIT_DESCRIPTION,
    CUSTOM_SETTINGS,
)
from app.bot.handlers.gamification import show_profile, show_rewards, show_leaderboard
from app.bot.services.user_service import get_or_create_user
from app.core.database import get_db_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=getattr(logging, settings.LOG_LEVEL.upper()),
)
logger = logging.getLogger(__name__)


async def setup_bot_commands(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("profile", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å, –æ—á–∫–∏, —Å–µ—Ä–∏—é"),
        BotCommand("habits", "–£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫"),
        BotCommand("create_habit", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)"),
        BotCommand("complete", "–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"),
        BotCommand("delete_habit", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"),
        BotCommand("stats", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º"),
        BotCommand("rewards", "–£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–≥—Ä–∞–¥ (–±–µ–π–¥–∂–µ–π)"),
        BotCommand("leaderboard", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
    ]
    try:
        await application.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")


async def start(update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    if not user:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        async for db in get_db_session():
            db_user = await get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            welcome_message = (
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã\n"
                "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É!\n"
                f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {db_user.level} | –û—á–∫–∏: {db_user.points}"
            )
            await update.message.reply_text(welcome_message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def update_commands(update, context) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
    try:
        await setup_bot_commands(context.application)
        await update.message.reply_text("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")


async def help_command(update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "1. /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "2. /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å, –æ—á–∫–∏, —Å–µ—Ä–∏—é\n"
        "3. /habits - –£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "4. /create_habit - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "5. /complete - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)\n"
        "6. /delete_habit - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "7. /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º\n"
        "8. /rewards - –£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–≥—Ä–∞–¥ (–±–µ–π–¥–∂–µ–π)\n"
        "9. /leaderboard - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º\n"
        "10. /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫:**\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_habit –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
        "**–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:**\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ï–∂–µ–¥–Ω–µ–≤–Ω–æ/–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ/–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫)\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)\n"
        "4Ô∏è‚É£ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n"
        "‚Ä¢ **–ï–∂–µ–¥–Ω–µ–≤–Ω–æ** - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00\n"
        "‚Ä¢ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ** - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ **–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ (custom)** - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "**Custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n"
        "–§–æ—Ä–º–∞—Ç: `–¥–Ω–∏_–Ω–µ–¥–µ–ª–∏,–≤—Ä–µ–º—è,—á–∞—Å—Ç–æ—Ç–∞`\n"
        "‚Ä¢ –î–Ω–∏: –ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç,—Å–±,–≤—Å\n"
        "‚Ä¢ –í—Ä–µ–º—è: HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00)\n"
        "‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)\n\n"
        "**–ü—Ä–∏–º–µ—Ä custom:** `–ø–Ω,—Å—Ä,–ø—Ç, 18:00, 1`\n\n"
        "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫:**\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_habit –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
        "**–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è:**\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "2Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ\n"
        "3Ô∏è‚É£ –ü—Ä–∏–≤—ã—á–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    await update.message.reply_text(help_text)


async def setup_scheduler(application: Application):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await setup_bot_commands(application)
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = HabitReminderScheduler(application)
    await scheduler.start()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    application.bot_data["scheduler"] = scheduler


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    create_habit_conversation = ConversationHandler(
        entry_points=[CommandHandler("create_habit", start_create_habit)],
        states={
            SCHEDULE_TYPE: [
                CallbackQueryHandler(handle_schedule_type, pattern="^schedule_")
            ],
            CUSTOM_SETTINGS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_settings)
            ],
            HABIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_habit_name)
            ],
            HABIT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_habit_description),
                CommandHandler("skip", handle_habit_description)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_create_habit)],
        per_message=False,
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("update_commands", update_commands))
    application.add_handler(CommandHandler("profile", show_profile))
    application.add_handler(CommandHandler("habits", list_habits))
    application.add_handler(create_habit_conversation)  # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
    application.add_handler(CommandHandler("complete", complete_habit))
    application.add_handler(CommandHandler("delete_habit", delete_habit))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("rewards", show_rewards))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("test_notifications", test_notifications))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
    application.add_handler(CallbackQueryHandler(handle_complete_callback, pattern="^complete_"))
    application.add_handler(CallbackQueryHandler(handle_delete_callback, pattern="^delete_"))
    application.add_handler(CallbackQueryHandler(handle_delete_confirm_callback, pattern="^(confirm_delete_|cancel_delete)"))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö."""
        logger.error(msg="–í—ã–∑–≤–∞–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)

    application.add_error_handler(error_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.post_init = setup_scheduler

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
