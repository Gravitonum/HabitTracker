"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞.
"""

import asyncio
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Application
from app.core.config import settings
from app.core.scheduler import HabitReminderScheduler
from app.bot.handlers.habits import (
    list_habits,
    create_habit_command,
    complete_habit,
    show_stats,
)
from app.bot.handlers.gamification import show_profile, show_rewards, show_leaderboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=getattr(logging, settings.LOG_LEVEL.upper()),
)
logger = logging.getLogger(__name__)


async def start(update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/habits - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/create_habit - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/complete - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º\n"
        "/rewards - –í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã\n"
        "/leaderboard - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    await update.message.reply_text(welcome_message)


async def help_command(update, context) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "1. /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "2. /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å, –æ—á–∫–∏, —Å–µ—Ä–∏—é\n"
        "3. /habits - –£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "4. /create_habit –ù–∞–∑–≤–∞–Ω–∏–µ - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "5. /complete –ù–æ–º–µ—Ä - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n"
        "6. /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º\n"
        "7. /rewards - –£–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–≥—Ä–∞–¥ (–±–µ–π–¥–∂–µ–π)\n"
        "8. /leaderboard - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º\n"
        "9. /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã!"
    )
    await update.message.reply_text(help_text)


async def setup_scheduler(application: Application):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    """
    scheduler = HabitReminderScheduler(application)
    await scheduler.start()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    application.bot_data["scheduler"] = scheduler


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", show_profile))
    application.add_handler(CommandHandler("habits", list_habits))
    application.add_handler(CommandHandler("create_habit", create_habit_command))
    application.add_handler(CommandHandler("complete", complete_habit))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("rewards", show_rewards))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö."""
        logger.error(msg="–í—ã–∑–≤–∞–Ω –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)

    application.add_error_handler(error_handler)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.post_init = setup_scheduler

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
