"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from app.bot.services.reward_service import get_user_rewards, get_user_level_info
from app.bot.services.habit_service import get_user_statistics
from app.bot.services.user_service import get_or_create_user, get_top_users_by_points, get_user_position_by_points, update_user_reminder_frequency
from app.core.database import get_db_session
import logging

logger = logging.getLogger(__name__)


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—Ä–æ–≤–Ω–µ–º, –æ—á–∫–∞–º–∏ –∏ —Å–µ—Ä–∏–µ–π.
    """
    user = update.effective_user
    if not user:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
            )
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
                )
            else:
                logger.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞"
                )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if update.message is None:
        logger.warning(
            f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è update_id {update.update_id}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
            )
        return

    telegram_id = user.id

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=telegram_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stats = await get_user_statistics(db, telegram_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            frequency_descriptions = {
                "*/10": "–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç",
                "*/15": "–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", 
                "*/30": "–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
                "*/45": "–∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç",
                "0": "–∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞",
                "daily_start": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è",
                "daily_end": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è –≤ 18:00"
            }
            
            reminder_freq = db_user.reminder_frequency or "0"
            frequency_desc = frequency_descriptions.get(reminder_freq, "–∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞")
            
            message = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
            message += f"Telegram ID: {telegram_id}\n"
            message += f"–£—Ä–æ–≤–µ–Ω—å: {db_user.level}\n"
            message += f"–û—á–∫–∏: {db_user.points}\n"
            message += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {db_user.current_streak} –¥–Ω–µ–π\n"
            message += f"–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è: {db_user.longest_streak} –¥–Ω–µ–π\n"
            message += f"–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {frequency_desc}\n"
            message += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {db_user.created_at.strftime('%d.%m.%Y') if db_user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            message += "–ù–∞–≥—Ä–∞–¥—ã: –ø–æ–∫–∞ –Ω–µ—Ç\n"
            message += "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—ã—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats\n"
            message += "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reminder_settings"

            await update.message.reply_text(message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")


async def show_rewards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.effective_user
    if not user:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ update.message –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if update.message is None:
        logger.warning(
            f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è update_id {update.update_id}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
            )
        return

    telegram_id = user.id

    # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)
    # rewards = await get_user_rewards(db_session, telegram_id)

    # –ü–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    message = f"–ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}:\n"
    message += "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!"

    await update.message.reply_text(message)


async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ –æ—á–∫–∞–º).
    """
    user = update.effective_user
    if not user:
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if update.message is None:
        logger.warning(
            f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è update_id {update.update_id}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
            )
        return

    telegram_id = user.id

    try:
        async for db in get_db_session():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º
            leaderboard = await get_top_users_by_points(db, limit=10)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_position = await get_user_position_by_points(db, telegram_id)
            
            if not leaderboard:
                message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ –æ—á–∫–∞–º):\n\n"
                message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!\n"
                message += "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏ –∏ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."
            else:
                message = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ –æ—á–∫–∞–º):\n\n"
                
                for user_data, position in leaderboard:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    display_name = user_data.first_name or user_data.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.telegram_id}"
                    if user_data.last_name:
                        display_name += f" {user_data.last_name}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
                    if position == 1:
                        medal = "ü•á"
                    elif position == 2:
                        medal = "ü•à"
                    elif position == 3:
                        medal = "ü•â"
                    else:
                        medal = f"{position}."
                    
                    message += f"{medal} {display_name} - {user_data.points} –æ—á–∫–æ–≤\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message += "\n"
                if user_position:
                    if user_position <= 10:
                        message += f"üéØ –í–∞—à–µ –º–µ—Å—Ç–æ: {user_position} (—É–∂–µ –≤ —Ç–æ–ø–µ!)"
                    else:
                        message += f"üéØ –í–∞—à–µ –º–µ—Å—Ç–æ: {user_position}"
                else:
                    message += "üéØ –í–∞—à–µ –º–µ—Å—Ç–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–∞–±–µ—Ä–∏—Ç–µ –æ—á–∫–∏!)"

            await update.message.reply_text(message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")


async def show_reminder_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    user = update.effective_user
    if not user:
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
            )
        return

    if update.message is None:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è update_id {update.update_id}")
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.",
            )
        return

    telegram_id = user.id

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=telegram_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç", callback_data="reminder_freq_*/10"),
                    InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", callback_data="reminder_freq_*/15")
                ],
                [
                    InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç", callback_data="reminder_freq_*/30"),
                    InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç", callback_data="reminder_freq_*/45")
                ],
                [
                    InlineKeyboardButton("–ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="reminder_freq_0"),
                    InlineKeyboardButton("–ù–∞—á–∞–ª–æ –¥–Ω—è", callback_data="reminder_freq_daily_start")
                ],
                [
                    InlineKeyboardButton("–ö–æ–Ω–µ—Ü –¥–Ω—è (18:00)", callback_data="reminder_freq_daily_end")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            current_freq = db_user.reminder_frequency or "0"
            frequency_descriptions = {
                "*/10": "–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç",
                "*/15": "–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", 
                "*/30": "–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
                "*/45": "–∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç",
                "0": "–∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞",
                "daily_start": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è",
                "daily_end": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è –≤ 18:00"
            }
            
            current_desc = frequency_descriptions.get(current_freq, "–∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞")
            
            message = f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
            message += f"–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: **{current_desc}**\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:"
            
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


async def handle_reminder_frequency_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ callback.
    """
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    user = update.effective_user
    if not user:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –∏–∑ callback_data
    if not query.data.startswith("reminder_freq_"):
        return
    
    selected_frequency = query.data.replace("reminder_freq_", "")
    
    telegram_id = user.id
    
    try:
        async for db in get_db_session():
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await update_user_reminder_frequency(db, telegram_id, selected_frequency)
            
            if success:
                frequency_descriptions = {
                    "*/10": "–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç",
                    "*/15": "–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç", 
                    "*/30": "–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç",
                    "*/45": "–∫–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç",
                    "0": "–∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞",
                    "daily_start": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è",
                    "daily_end": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è –≤ 18:00"
                }
                
                selected_desc = frequency_descriptions.get(selected_frequency, "–∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞")
                
                message = f"‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n"
                message += f"–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: **{selected_desc}**\n\n"
                message += "–ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–æ–º–µ–Ω—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."
                
                await query.edit_message_text(message, parse_mode='Markdown')
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
