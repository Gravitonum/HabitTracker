"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from app.bot.services.habit_service import create_habit, get_available_schedule_types
from app.bot.services.user_service import get_or_create_user
from app.core.database import get_db_session
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SCHEDULE_TYPE, HABIT_NAME, HABIT_DESCRIPTION, CUSTOM_SETTINGS = range(4)

# –¢–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
SCHEDULE_TYPES = {
    "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
    "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", 
    "custom": "–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ (custom)"
}

# –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
SCHEDULE_TYPES_REVERSE = {v: k for k, v in SCHEDULE_TYPES.items()}


async def start_create_habit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    user = update.effective_user
    if not user:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="schedule_daily")],
        [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", callback_data="schedule_weekly")],
        [InlineKeyboardButton("–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ (custom)", callback_data="schedule_custom")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üèóÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

    return SCHEDULE_TYPE


async def handle_schedule_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()

    if query.data.startswith("schedule_"):
        schedule_type = query.data.replace("schedule_", "")
        context.user_data['schedule_type'] = schedule_type
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω custom, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º custom
        if schedule_type == "custom":
            await query.edit_message_text(
                "üìÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–¥–Ω–∏_–Ω–µ–¥–µ–ª–∏,–≤—Ä–µ–º—è,—á–∞—Å—Ç–æ—Ç–∞`\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `–ø–Ω,—Å—Ä,–ø—Ç, 18:00, 1` - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞ –≤ 18:00\n"
                "‚Ä¢ `—Å–±,–≤—Å, 10:00, 1` - –≤—ã—Ö–æ–¥–Ω—ã–µ –≤ 10:00\n"
                "‚Ä¢ `–ø–Ω,–≤—Ç,—Å—Ä,—á—Ç,–ø—Ç, 09:00, 1` - –±—É–¥–Ω–∏ –≤ 9:00\n\n"
                "**–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:** –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å\n"
                "**–í—Ä–µ–º—è:** HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00)\n"
                "**–ß–∞—Å—Ç–æ—Ç–∞:** –∫–∞–∂–¥—ã–µ N –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)"
            )
            return CUSTOM_SETTINGS
        else:
            # –î–ª—è daily –∏ weekly –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
            await query.edit_message_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: **{SCHEDULE_TYPES[schedule_type]}**\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:"
            )
            return HABIT_NAME

    return SCHEDULE_TYPE


async def handle_custom_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    custom_settings = update.message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    parts = custom_settings.split(",")
    if len(parts) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–¥–Ω–∏_–Ω–µ–¥–µ–ª–∏,–≤—Ä–µ–º—è,—á–∞—Å—Ç–æ—Ç–∞`\n"
            "**–ü—Ä–∏–º–µ—Ä:** `–ø–Ω,—Å—Ä,–ø—Ç, 18:00, 1`"
        )
        return CUSTOM_SETTINGS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    context.user_data['custom_schedule_days'] = parts[0].strip()
    context.user_data['custom_schedule_time'] = parts[1].strip()
    context.user_data['custom_schedule_frequency'] = int(parts[2].strip()) if len(parts) > 2 else 1
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"‚Ä¢ –î–Ω–∏: {context.user_data['custom_schedule_days']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {context.user_data['custom_schedule_time']}\n"
        f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {context.user_data['custom_schedule_frequency']}\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:"
    )
    
    return HABIT_NAME


async def handle_habit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.
    """
    habit_name = update.message.text.strip()
    
    if not habit_name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return HABIT_NAME
    
    context.user_data['habit_name'] = habit_name
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{habit_name}**\n\n"
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    
    return HABIT_DESCRIPTION


async def handle_habit_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /skip
    if update.message.text and update.message.text.strip().lower() == "/skip":
        description = ""
    else:
        description = update.message.text.strip() if update.message.text else ""
    
    context.user_data['habit_description'] = description
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name,
                last_name=update.effective_user.last_name,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            schedule_type = context.user_data['schedule_type']
            habit_name = context.user_data['habit_name']
            habit_description = context.user_data['habit_description']
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            custom_schedule_days = context.user_data.get('custom_schedule_days')
            custom_schedule_time = context.user_data.get('custom_schedule_time')
            custom_schedule_frequency = context.user_data.get('custom_schedule_frequency', 1)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
            new_habit = await create_habit(
                db=db,
                telegram_id=update.effective_user.id,
                name=habit_name,
                description=habit_description,
                schedule_type=schedule_type,
                custom_schedule_days=custom_schedule_days,
                custom_schedule_time=custom_schedule_time,
                custom_schedule_frequency=custom_schedule_frequency
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            message = f"üéâ –ü—Ä–∏–≤—ã—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {habit_name}\n"
            if habit_description:
                message += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {habit_description}\n"
            message += f"üìÖ –¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {SCHEDULE_TYPES[schedule_type]}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if schedule_type == "custom":
                if custom_schedule_days:
                    message += f"üóìÔ∏è –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {custom_schedule_days}\n"
                if custom_schedule_time:
                    message += f"‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {custom_schedule_time}\n"
                if custom_schedule_frequency > 1:
                    message += f"üîÑ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {custom_schedule_frequency} –¥–Ω—è\n"
            
            message += f"‚≠ê –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏: {new_habit.base_points}\n"
            message += f"üÜî ID –ø—Ä–∏–≤—ã—á–∫–∏: {str(new_habit.id)[:8]}...\n\n"
            message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫."
            
            await update.message.reply_text(message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END


async def cancel_create_habit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏.
    """
    context.user_data.clear()
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END
