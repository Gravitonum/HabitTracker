"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.
"""

from telegram import Update
from telegram.ext import ContextTypes
from app.bot.services.habit_service import (
    create_habit,
    get_user_habits,
    get_user_statistics,
    mark_habit_completed,
    get_habit_by_id,
    get_all_completions_for_habit,
    get_available_schedule_types,
    calculate_current_streak,
)
from app.models.database import ScheduleType, HabitCompletion, Habit
from app.bot.services.reward_service import award_points_and_rewards
from app.bot.services.user_service import get_or_create_user
from app.utils.points_calculator import calculate_total_points_for_completion
from app.utils.streak_calculator import update_streak_increment
from app.core.database import get_db_session
from datetime import date
from sqlalchemy import select
import logging

logger = logging.getLogger(__name__)


async def _send_reply(update: Update, text: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if update.message:
            await update.message.reply_text(text)
        elif update.callback_query:
            # –î–ª—è callback_query –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º effective_chat
            if update.effective_chat:
                await update.effective_chat.send_message(text)
            elif update.effective_user:
                # –ï—Å–ª–∏ effective_chat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º bot —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await update.get_bot().send_message(
                    chat_id=update.effective_user.id, text=text
                )
            else:
                logger.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_chat –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            if update.effective_chat:
                await update.effective_chat.send_message(text)
            elif update.effective_user:
                await update.get_bot().send_message(
                    chat_id=update.effective_user.id, text=text
                )
            else:
                logger.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        try:
            if update.effective_user:
                await update.get_bot().send_message(
                    chat_id=update.effective_user.id, text=text
                )
            else:
                logger.error(
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
        except Exception as final_error:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {final_error}")


async def list_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.effective_user
    if not user:
        await _send_reply(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    telegram_id = user.id

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=telegram_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = await get_user_habits(db, telegram_id)
            
            if not habits:
                message = f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                message += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /create_habit"
                await _send_reply(update, message)
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            from sqlalchemy import select
            schedule_types_result = await db.execute(select(ScheduleType))
            schedule_types = {st.id: st.name for st in schedule_types_result.scalars().all()}
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            schedule_type_names = {
                "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "custom": "–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫"
            }
            
            message = f"üìã –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
            from datetime import date
            for i, habit in enumerate(habits, 1):
                status = "‚úÖ" if habit.is_active else "‚ùå"
                schedule_type_name = schedule_type_names.get(schedule_types.get(habit.schedule_type_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                today_completion = await db.execute(
                    select(HabitCompletion)
                    .where(HabitCompletion.habit_id == habit.id)
                    .where(HabitCompletion.completion_date == date.today())
                    .where(HabitCompletion.is_completed == True)
                )
                is_completed_today = today_completion.scalar_one_or_none() is not None
                today_status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è" if is_completed_today else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è"
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é
                current_streak = await calculate_current_streak(db, habit.id)
                streak_text = f"{current_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥" if current_streak > 0 else "–Ω–µ—Ç —Å–µ—Ä–∏–∏"
                
                message += f"{i}. {status} {habit.name}\n"
                if habit.description:
                    message += f"   üìÑ {habit.description}\n"
                message += f"   üìÖ {schedule_type_name}"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if schedule_types.get(habit.schedule_type_id) == "custom":
                    if habit.custom_schedule_days:
                        message += f" ({habit.custom_schedule_days}"
                    if habit.custom_schedule_time:
                        message += f", {habit.custom_schedule_time}"
                    if habit.custom_schedule_frequency and habit.custom_schedule_frequency > 1:
                        message += f", –∫–∞–∂–¥—ã–µ {habit.custom_schedule_frequency} –¥–Ω—è"
                    if habit.custom_schedule_days:
                        message += ")"
                
                message += f"\n   üî• –°–µ—Ä–∏—è: {streak_text}\n"
                message += f"   {today_status}\n"
                message += f"   ‚≠ê {habit.base_points} –æ—á–∫–æ–≤\n\n"
            
            message += "\n–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /complete <–Ω–æ–º–µ—Ä>"
            await _send_reply(update, message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await _send_reply(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫.")


async def create_habit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥.
    """
    user = update.effective_user
    if not user:
        await _send_reply(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    if not context.args:
        await _send_reply(
            update,
            "üèóÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º!\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_habit –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n"
            "**–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏):**\n"
            "`/create_habit –ù–∞–∑–≤–∞–Ω–∏–µ - –û–ø–∏—Å–∞–Ω–∏–µ - –¢–∏–ø_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ `/create_habit –ü–∏—Ç—å –≤–æ–¥—É - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã - daily`\n"
            "‚Ä¢ `/create_habit –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é - weekly`\n"
            "‚Ä¢ `/create_habit –ß—Ç–µ–Ω–∏–µ - –ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º - custom - –ø–Ω,—Å—Ä,–ø—Ç, 18:00, 1`\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:** daily, weekly, custom"
        )
        return

    command_text = " ".join(context.args)
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: –Ω–∞–∑–≤–∞–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ - —Ç–∏–ø_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - custom_–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    parts = command_text.split(" - ")
    if len(parts) < 2:
        await _send_reply(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ - –æ–ø–∏—Å–∞–Ω–∏–µ - —Ç–∏–ø_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        return
    
    name = parts[0].strip()
    description = parts[1].strip()
    schedule_type = parts[2].strip().lower() if len(parts) > 2 else "daily"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è custom —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    custom_schedule_days = None
    custom_schedule_time = None
    custom_schedule_frequency = 1
    
    if schedule_type == "custom" and len(parts) > 3:
        # –ü–∞—Ä—Å–∏–º custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–Ω–∏_–Ω–µ–¥–µ–ª–∏,–≤—Ä–µ–º—è,—á–∞—Å—Ç–æ—Ç–∞
        custom_settings = parts[3].strip()
        if custom_settings:
            custom_parts = custom_settings.split(",")
            if len(custom_parts) >= 1:
                custom_schedule_days = custom_parts[0].strip()
            if len(custom_parts) >= 2:
                custom_schedule_time = custom_parts[1].strip()
            if len(custom_parts) >= 3:
                try:
                    custom_schedule_frequency = int(custom_parts[2].strip())
                except ValueError:
                    custom_schedule_frequency = 1

    if not name:
        await _send_reply(update, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    valid_schedule_types = ["daily", "weekly", "custom"]
    if schedule_type not in valid_schedule_types:
        await _send_reply(
            update, 
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '{schedule_type}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(valid_schedule_types)}"
        )
        return

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
            new_habit = await create_habit(
                db=db, 
                telegram_id=user.id, 
                name=name, 
                description=description,
                schedule_type=schedule_type,
                custom_schedule_days=custom_schedule_days,
                custom_schedule_time=custom_schedule_time,
                custom_schedule_frequency=custom_schedule_frequency,
                timezone="Europe/Moscow"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            )

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            schedule_type_names = {
                "daily": "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "weekly": "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", 
                "custom": "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ"
            }

            message = f"–ü—Ä–∏–≤—ã—á–∫–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ\n"
            if description:
                message += f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            message += f"–¢–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {schedule_type_names[schedule_type]}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if schedule_type == "custom":
                if custom_schedule_days:
                    message += f"–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {custom_schedule_days}\n"
                if custom_schedule_time:
                    message += f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {custom_schedule_time}\n"
                if custom_schedule_frequency > 1:
                    message += f"–ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {custom_schedule_frequency} –¥–Ω—è\n"
            
            message += f"–ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏: {new_habit.base_points}\n"
            message += f"ID –ø—Ä–∏–≤—ã—á–∫–∏: {str(new_habit.id)[:8]}..."
            
            await _send_reply(update, message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await _send_reply(update, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}")


async def complete_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –æ—Ç–º–µ—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.
    """
    user = update.effective_user
    if not user:
        await _send_reply(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = await get_user_habits(db, user.id)
            
            if not habits:
                await _send_reply(update, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /create_habit")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            schedule_types_result = await db.execute(select(ScheduleType))
            schedule_types = {st.id: st.name for st in schedule_types_result.scalars().all()}
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            schedule_type_names = {
                "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "custom": "–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫"
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = []
            
            message = f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
            
            for i, habit in enumerate(habits, 1):
                status = "‚úÖ" if habit.is_active else "‚ùå"
                schedule_type_name = schedule_type_names.get(schedule_types.get(habit.schedule_type_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                today_completion = await db.execute(
                    select(HabitCompletion)
                    .where(HabitCompletion.habit_id == habit.id)
                    .where(HabitCompletion.completion_date == date.today())
                    .where(HabitCompletion.is_completed == True)
                )
                is_completed_today = today_completion.scalar_one_or_none() is not None
                today_status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed_today else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é
                current_streak = await calculate_current_streak(db, habit.id)
                streak_text = f"{current_streak} –¥–Ω–µ–π" if current_streak > 0 else "–Ω–µ—Ç —Å–µ—Ä–∏–∏"
                
                message += f"{i}. {status} {habit.name}\n"
                message += f"   üìÖ {schedule_type_name} | {today_status} | üî• {streak_text}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
                button_text = f"{i}. {habit.name}"
                if is_completed_today:
                    button_text += " ‚úÖ"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"complete_{habit.id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await _send_reply(update, message)
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:", reply_markup=reply_markup)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        await _send_reply(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫.")


async def handle_complete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("complete_"):
        habit_id_str = query.data.replace("complete_", "")
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ UUID
            import uuid
            habit_id = uuid.UUID(habit_id_str)
            
            async for db in get_db_session():
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ UUID
                db_user = await get_or_create_user(
                    db=db,
                    telegram_id=query.from_user.id,
                    username=query.from_user.username,
                    first_name=query.from_user.first_name,
                    last_name=query.from_user.last_name,
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ ID
                habit_result = await db.execute(
                    select(Habit).where(Habit.id == habit_id)
                )
                habit = habit_result.scalar_one_or_none()
                
                if not habit:
                    await query.edit_message_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                today_completion = await db.execute(
                    select(HabitCompletion)
                    .where(HabitCompletion.habit_id == habit.id)
                    .where(HabitCompletion.completion_date == date.today())
                    .where(HabitCompletion.is_completed == True)
                )
                existing_completion = today_completion.scalar_one_or_none()
                
                if existing_completion:
                    await query.edit_message_text(f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{habit.name}' —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è!")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
                all_completions = await get_all_completions_for_habit(db, habit.id)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º streak_increment
                streak_val = update_streak_increment(habit.id, db_user.id, date.today(), all_completions)
                
                # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                completion = await mark_habit_completed(db, habit.id, db_user.id, date.today(), streak_val)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
                points_earned = calculate_total_points_for_completion(habit, streak_val)
                await award_points_and_rewards(db, query.from_user.id, points_earned, streak_val)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                message = f"üéâ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit.name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n\n"
                message += f"‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤: {points_earned}\n"
                if streak_val > 0:
                    message += f"üî• –°–µ—Ä–∏—è: {streak_val} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n"
                message += f"üìÖ –î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}\n\n"
                message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                
                await query.edit_message_text(message)
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.effective_user
    if not user:
        await _send_reply(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    telegram_id = user.id

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=telegram_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_user_statistics(db, telegram_id)
            
            if "error" in stats:
                await _send_reply(update, f"–û—à–∏–±–∫–∞: {stats['error']}")
                break
            
            if stats["total_habits"] == 0:
                message = f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                message += "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /create_habit"
                await _send_reply(update, message)
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            from sqlalchemy import select
            schedule_types_result = await db.execute(select(ScheduleType))
            schedule_types = {st.id: st.name for st in schedule_types_result.scalars().all()}
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            schedule_type_names = {
                "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "custom": "–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫"
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}:\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–µ
            for habit_stat in stats["habits"]:
                habit = habit_stat["habit"]
                status_icon = "‚úÖ" if habit_stat["completed_today"] else "‚ùå"
                streak_text = f"{habit_stat['current_streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥" if habit_stat['current_streak'] > 0 else "–Ω–µ—Ç —Å–µ—Ä–∏–∏"
                schedule_type_name = schedule_type_names.get(schedule_types.get(habit.schedule_type_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                message += f"{status_icon} {habit.name}\n"
                message += f"   üìÖ {schedule_type_name}\n"
                message += f"   üî• –°–µ—Ä–∏—è: {streak_text}\n"
                message += f"   üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {habit_stat['week_completions']}/7 –¥–Ω–µ–π\n"
                message += f"   üìà –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {habit_stat['total_completions']}\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            message += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['completed_today']}/{stats['total_habits']} –ø—Ä–∏–≤—ã—á–µ–∫\n"
            message += f"   –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['overall_progress']:.1f}%\n"
            message += f"   –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['total_completions']}"
            
            await _send_reply(update, message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await _send_reply(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def delete_habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    user = update.effective_user
    if not user:
        await _send_reply(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    try:
        async for db in get_db_session():
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            db_user = await get_or_create_user(
                db=db,
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = await get_user_habits(db, user.id)
            
            if not habits:
                await _send_reply(update, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            schedule_types_result = await db.execute(select(ScheduleType))
            schedule_types = {st.id: st.name for st in schedule_types_result.scalars().all()}
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            schedule_type_names = {
                "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "custom": "–°–≤–æ–π –≥—Ä–∞—Ñ–∏–∫"
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = []
            
            message = f"üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            
            for i, habit in enumerate(habits, 1):
                status = "‚úÖ" if habit.is_active else "‚ùå"
                schedule_type_name = schedule_type_names.get(schedule_types.get(habit.schedule_type_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                today_completion = await db.execute(
                    select(HabitCompletion)
                    .where(HabitCompletion.habit_id == habit.id)
                    .where(HabitCompletion.completion_date == date.today())
                    .where(HabitCompletion.is_completed == True)
                )
                is_completed_today = today_completion.scalar_one_or_none() is not None
                today_status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if is_completed_today else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é
                current_streak = await calculate_current_streak(db, habit.id)
                streak_text = f"{current_streak} –¥–Ω–µ–π" if current_streak > 0 else "–Ω–µ—Ç —Å–µ—Ä–∏–∏"
                
                message += f"{i}. {status} {habit.name}\n"
                message += f"   üìÖ {schedule_type_name} | {today_status} | üî• {streak_text}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
                button_text = f"{i}. {habit.name}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delete_{habit.id}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await _send_reply(update, message)
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=reply_markup)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await _send_reply(update, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫.")


async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("delete_"):
        habit_id_str = query.data.replace("delete_", "")
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ UUID
            import uuid
            habit_id = uuid.UUID(habit_id_str)
            
            async for db in get_db_session():
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ ID
                habit_result = await db.execute(
                    select(Habit).where(Habit.id == habit_id)
                )
                habit = habit_result.scalar_one_or_none()
                
                if not habit:
                    await query.edit_message_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                confirm_keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{habit.id}")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")]
                ]
                reply_markup = InlineKeyboardMarkup(confirm_keyboard)
                
                message = f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É '{habit.name}'?\n\n"
                message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {habit.name}\n"
                if habit.description:
                    message += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {habit.description}\n"
                message += f"‚≠ê –û—á–∫–∏: {habit.base_points}\n\n"
                message += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
                
                await query.edit_message_text(message, reply_markup=reply_markup)
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def handle_delete_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.
    """
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("confirm_delete_"):
        habit_id_str = query.data.replace("confirm_delete_", "")
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ UUID
            import uuid
            habit_id = uuid.UUID(habit_id_str)
            
            async for db in get_db_session():
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –ø–æ ID
                habit_result = await db.execute(
                    select(Habit).where(Habit.id == habit_id)
                )
                habit = habit_result.scalar_one_or_none()
                
                if not habit:
                    await query.edit_message_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                
                habit_name = habit.name
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
                await db.delete(habit)
                await db.commit()
                
                message = f"üóëÔ∏è –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                
                await query.edit_message_text(message)
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {str(e)}")
    
    elif query.data == "cancel_delete":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


async def test_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏).
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—ã—á–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.effective_user
    if not user:
        await _send_reply(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        return

    try:
        from app.core.database import get_db_session
        from app.bot.services.habit_service import get_users_with_uncompleted_daily_habits
        
        async for db in get_db_session():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤—ã—á–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from sqlalchemy import select
            from app.models.database import User, Habit, ScheduleType
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user_result = await db.execute(
                select(User).where(User.telegram_id == user.id)
            )
            user_obj = user_result.scalar_one_or_none()
            
            if not user_obj:
                await _send_reply(update, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits_result = await db.execute(
                select(Habit, ScheduleType)
                .join(ScheduleType, Habit.schedule_type_id == ScheduleType.id)
                .where(Habit.user_id == user_obj.id)
                .where(Habit.is_active == True)
            )
            user_habits = habits_result.all()
            
            if not user_habits:
                await _send_reply(update, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users_to_notify = await get_users_with_uncompleted_daily_habits(db)
            current_user_data = None
            
            for user_data in users_to_notify:
                if user_data['user'].telegram_id == user.id:
                    current_user_data = user_data
                    break
            
            if not current_user_data or not current_user_data['uncompleted_habits']:
                await _send_reply(update, "–í—Å–µ –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è!")
                break
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            uncompleted_habits = current_user_data['uncompleted_habits']
            habit_names = [habit.name for habit in uncompleted_habits]
            
            message = (
                f"üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {user_obj.first_name or user_obj.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
            )
            
            for i, habit_name in enumerate(habit_names, 1):
                message += f"{i}. {habit_name}\n"
            
            message += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /complete <–Ω–æ–º–µ—Ä> –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
            
            await _send_reply(update, message)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await _send_reply(update, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
