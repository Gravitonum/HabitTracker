"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from app.bot.services.bugreport_service import create_bug_report
from app.bot.services.user_service import get_or_create_user
from app.core.database import get_db_session
from app.models.schemas import BugReportCreate
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_TITLE, WAITING_FOR_DESCRIPTION, WAITING_FOR_INCIDENT_TYPE = range(3)

# –¢–∏–ø—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
INCIDENT_TYPES = {
    "Critical": "üî¥ –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É—Ç—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö",
    "High": "üü† –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Å–±–æ–∏ –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
    "Low": "üü° –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–±–æ–∏, –Ω–µ—Ç –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å",
    "Feature": "üí° –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
}


async def start_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        user = update.effective_user
        if not user:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['user_id'] = user.id
        context.user_data['username'] = user.username
        context.user_data['first_name'] = user.first_name
        context.user_data['last_name'] = user.last_name

        await update.message.reply_text(
            "üêõ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–∑–∞–≥–æ–ª–æ–≤–æ–∫):\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã' –∏–ª–∏ '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏'"
        )
        
        return WAITING_FOR_TITLE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_bug_report: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def handle_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    """
    try:
        title = update.message.text.strip()
        
        if len(title) < 5:
            await update.message.reply_text(
                "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            return WAITING_FOR_TITLE
            
        if len(title) > 200:
            await update.message.reply_text(
                "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤:"
            )
            return WAITING_FOR_TITLE
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        context.user_data['title'] = title
        
        await update.message.reply_text(
            "üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:\n\n"
            "‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≤–µ–ª–∏ –∫ –æ—à–∏–±–∫–µ?\n"
            "‚Ä¢ –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã –æ–∂–∏–¥–∞–ª–∏?\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏?\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        
        return WAITING_FOR_DESCRIPTION
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_title: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    try:
        description = update.message.text.strip()
        
        if len(description) < 10:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            return WAITING_FOR_DESCRIPTION
            
        if len(description) > 2000:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤:"
            )
            return WAITING_FOR_DESCRIPTION
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['description'] = description
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        keyboard = []
        for incident_type, description_text in INCIDENT_TYPES.items():
            keyboard.append([InlineKeyboardButton(
                f"{incident_type} - {description_text}",
                callback_data=f"incident_type_{incident_type}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_bug_report")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:",
            reply_markup=reply_markup
        )
        
        return WAITING_FOR_INCIDENT_TYPE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_description: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def handle_incident_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞.
    """
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_bug_report":
            await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return ConversationHandler.END
            
        if query.data.startswith("incident_type_"):
            incident_type = query.data.replace("incident_type_", "")
            
            if incident_type not in INCIDENT_TYPES:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return WAITING_FOR_INCIDENT_TYPE
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            context.user_data['incident_type'] = incident_type
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
            await create_and_save_bug_report(update, context, incident_type)
            
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_incident_type: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def create_and_save_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE, incident_type: str):
    """
    –°–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        query = update.callback_query
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async for db in get_db_session():
            user = await get_or_create_user(
                db=db,
                telegram_id=context.user_data['user_id'],
                username=context.user_data['username'],
                first_name=context.user_data['first_name'],
                last_name=context.user_data['last_name']
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ ORM
            from app.models.database import BugReport
            from datetime import datetime
            
            db_bug_report = BugReport(
                user_id=user.id,
                title=context.user_data['title'],
                description=context.user_data['description'],
                incident_type=incident_type,
                status="New",
                admin_comment=None,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            db.add(db_bug_report)
            await db.commit()
            await db.refresh(db_bug_report)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            incident_description = INCIDENT_TYPES[incident_type]
            
            success_message = (
                f"‚úÖ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                f"üìã ID –æ—Ç—á–µ—Ç–∞: {db_bug_report.id}\n"
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {db_bug_report.title}\n"
                f"üîç –¢–∏–ø: {incident_type}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {incident_description}\n"
                f"üìÖ –î–∞—Ç–∞: {db_bug_report.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            
            await query.edit_message_text(success_message)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data.clear()
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ {db_bug_report.id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cancel_bug_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        query = update.callback_query
        if query:
            await query.answer()
            await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_bug_report: {e}")
        return ConversationHandler.END


async def show_bug_report_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö.
    """
    try:
        help_text = (
            "üêõ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö\n\n"
            "–¢–∏–ø—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:\n\n"
            "üî¥ Critical - –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É—Ç—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "üü† High - –ß–∞—Å—Ç–∏—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Å–±–æ–∏ –≤–∞–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"
            "üü° Low - –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–±–æ–∏, –Ω–µ—Ç –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å\n"
            "üí° Feature - –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n\n"
            "–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /send_bugreport\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
            "3. –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
            "4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞\n\n"
            "–°–æ–≤–µ—Ç—ã:\n"
            "‚Ä¢ –ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏\n"
            "‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        )
        
        await update.message.reply_text(help_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_bug_report_help: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")
