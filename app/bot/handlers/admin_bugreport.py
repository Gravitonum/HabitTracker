"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from app.bot.services.async_bugreport_service import (
    get_all_bug_reports_async, get_bug_report_by_id_async, update_bug_report_async,
    get_bug_reports_with_filters_async, get_bug_report_statistics_async,
    delete_bug_report_async, get_bug_reports_by_status_async
)
from app.core.database import get_db_session
from app.core.config import settings
from app.models.schemas import BugReportUpdate
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_COMMENT, WAITING_FOR_STATUS_CHANGE = range(2)


def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    return user_id == settings.ADMIN_ID

# –°—Ç–∞—Ç—É—Å—ã –æ—Ç—á–µ—Ç–æ–≤
REPORT_STATUSES = {
    "New": "üÜï –ù–æ–≤—ã–π",
    "InProgress": "üîÑ –í —Ä–∞–±–æ—Ç–µ", 
    "Solved": "‚úÖ –†–µ—à–µ–Ω–æ",
    "Rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
}

# –¢–∏–ø—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
INCIDENT_TYPES = {
    "Critical": "üî¥ Critical",
    "High": "üü† High", 
    "Low": "üü° Low",
    "Feature": "üí° Feature"
}


async def admin_bug_reports_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(update.effective_user.id):
            if update.message:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        keyboard = [
            [InlineKeyboardButton("üìã –í—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_all_reports")],
            [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_new_reports")],
            [InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data="admin_inprogress_reports")],
            [InlineKeyboardButton("‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ", callback_data="admin_solved_reports")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_rejected_reports")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_reports_stats")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin_search_reports")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(
                "üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.callback_query.edit_message_text(
                "üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –û—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_bug_reports_menu: {e}")
        if update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not is_admin(update.effective_user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if query.data == "admin_all_reports":
            await show_all_reports(update, context)
        elif query.data == "admin_new_reports":
            context.user_data['current_filter'] = 'status'
            context.user_data['current_status'] = 'New'
            await show_reports_by_status(update, context, "New")
        elif query.data == "admin_inprogress_reports":
            context.user_data['current_filter'] = 'status'
            context.user_data['current_status'] = 'InProgress'
            await show_reports_by_status(update, context, "InProgress")
        elif query.data == "admin_solved_reports":
            context.user_data['current_filter'] = 'status'
            context.user_data['current_status'] = 'Solved'
            await show_reports_by_status(update, context, "Solved")
        elif query.data == "admin_rejected_reports":
            context.user_data['current_filter'] = 'status'
            context.user_data['current_status'] = 'Rejected'
            await show_reports_by_status(update, context, "Rejected")
        elif query.data == "admin_reports_stats":
            await show_reports_statistics(update, context)
        elif query.data == "admin_search_reports":
            await start_search_reports(update, context)
        elif query.data.startswith("view_report_"):
            report_id = query.data.replace("view_report_", "")
            await show_report_details(update, context, report_id)
        elif query.data.startswith("change_status_"):
            report_id = query.data.replace("change_status_", "")
            await start_status_change(update, context, report_id)
        elif query.data.startswith("set_status_"):
            await handle_status_change(update, context)
        elif query.data.startswith("add_comment_"):
            report_id = query.data.replace("add_comment_", "")
            await start_add_comment(update, context, report_id)
        elif query.data.startswith("delete_report_"):
            report_id = query.data.replace("delete_report_", "")
            await delete_report(update, context, report_id)
        elif query.data.startswith("confirm_delete_report_"):
            report_id = query.data.replace("confirm_delete_report_", "")
            await confirm_delete_report(update, context, report_id)
        elif query.data == "back_to_admin_menu":
            await admin_bug_reports_menu(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def show_all_reports(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    try:
        query = update.callback_query
        skip = page * 10
        limit = 10
        
        async for db in get_db_session():
            reports = await get_all_bug_reports_async(db, skip=skip, limit=limit)
            
            if not reports:
                await query.edit_message_text(
                    "üìã –í—Å–µ –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö\n\n"
                    "–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
                    ]])
                )
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
            text = f"üìã –í—Å–µ –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
            
            keyboard = []
            for i, report in enumerate(reports, 1):
                status_emoji = REPORT_STATUSES.get(report.status, "‚ùì")
                incident_emoji = INCIDENT_TYPES.get(report.incident_type, "‚ùì")
                
                text += f"{i}. {status_emoji} {incident_emoji} {report.title}\n"
                text += f"   ID: {str(report.id)[:8]}... | {report.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üìÑ {report.title[:30]}...",
                    callback_data=f"view_report_{report.id}"
                )])
            
            # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_all_reports_page_{page-1}"))
            if len(reports) == limit:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"admin_all_reports_page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
                
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_admin_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, )
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_reports: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤.")


async def show_reports_by_status(update: Update, context: ContextTypes.DEFAULT_TYPE, status: str):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É.
    """
    try:
        query = update.callback_query
        
        async for db in get_db_session():
            reports = await get_bug_reports_by_status_async(db, status, skip=0, limit=50)
            
            if not reports:
                status_name = REPORT_STATUSES.get(status, status)
                await query.edit_message_text(
                    f"üìã –û—Ç—á–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status_name}\n\n"
                    "–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
                    ]])
                )
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
            status_name = REPORT_STATUSES.get(status, status)
            text = f"üìã –û—Ç—á–µ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status_name}\n\n"
            
            keyboard = []
            for i, report in enumerate(reports, 1):
                incident_emoji = INCIDENT_TYPES.get(report.incident_type, "‚ùì")
                
                text += f"{i}. {incident_emoji} {report.title}\n"
                text += f"   ID: {str(report.id)[:8]}... | {report.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üìÑ {report.title[:30]}...",
                    callback_data=f"view_report_{report.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_admin_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, )
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_reports_by_status: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤.")


async def show_report_details(update: Update, context: ContextTypes.DEFAULT_TYPE, report_id: str):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        query = update.callback_query
        
        async for db in get_db_session():
            report = await get_bug_report_by_id_async(db, report_id)
            
            if not report:
                await query.edit_message_text(
                    "‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
                    ]])
                )
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status_emoji = REPORT_STATUSES.get(report.status, "‚ùì")
            incident_emoji = INCIDENT_TYPES.get(report.incident_type, "‚ùì")
            
            text = f"üìÑ –î–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ\n\n"
            text += f"üÜî ID: {report.id}\n"
            text += f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {report.title}\n"
            text += f"üîç –¢–∏–ø: {incident_emoji} {report.incident_type}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {report.status}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω: {report.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {report.updated_at.strftime('%d.%m.%Y %H:%M') if report.updated_at else '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è'}\n\n"
            text += f"üìã –û–ø–∏—Å–∞–Ω–∏–µ:\n{report.description}\n\n"
            
            if report.admin_comment:
                text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{report.admin_comment}\n\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É —Å–ø–∏—Å–∫—É –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
            current_filter = context.user_data.get('current_filter', 'all')
            if current_filter == 'status':
                current_status = context.user_data.get('current_status', 'New')
                back_callback = f"admin_{current_status.lower()}_reports"
            else:
                back_callback = "admin_all_reports"
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{str(report.id)}")],
                [InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{str(report.id)}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_report_{str(report.id)}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=back_callback)]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, )
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_report_details: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞.")


async def start_status_change(update: Update, context: ContextTypes.DEFAULT_TYPE, report_id: str):
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞.
    """
    try:
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['report_id'] = report_id
        
        keyboard = []
        for status, status_name in REPORT_STATUSES.items():
            keyboard.append([InlineKeyboardButton(
                status_name,
                callback_data=f"set_status_{status}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_report_{report_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_status_change: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def handle_status_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞.
    """
    try:
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("set_status_"):
            new_status = query.data.replace("set_status_", "")
            report_id = context.user_data.get('report_id')
            
            if not report_id:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            async for db in get_db_session():
                update_data = BugReportUpdate(status=new_status)
                updated_report = await update_bug_report_async(db, report_id, update_data)
                
                if updated_report:
                    status_name = REPORT_STATUSES.get(new_status, new_status)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É —Å–ø–∏—Å–∫—É –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
                    current_filter = context.user_data.get('current_filter', 'all')
                    if current_filter == 'status':
                        current_status = context.user_data.get('current_status', 'New')
                        back_callback = f"admin_{current_status.lower()}_reports"
                    else:
                        back_callback = "admin_all_reports"
                    
                    await query.edit_message_text(
                        f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_name}",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"view_report_{report_id}")],
                            [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=back_callback)]
                        ])
                    )
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
                    
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context.user_data.pop('report_id', None)
                
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_status_change: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


async def start_add_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, report_id: str):
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç—á–µ—Ç—É.
    """
    try:
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['report_id'] = report_id
        
        await query.edit_message_text(
            "üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        return WAITING_FOR_COMMENT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_add_comment: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    """
    try:
        comment = update.message.text.strip()
        report_id = context.user_data.get('report_id')
        
        if not report_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
            
        if len(comment) > 1000:
            await update.message.reply_text(
                "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_FOR_COMMENT
            
        async for db in get_db_session():
            update_data = BugReportUpdate(admin_comment=comment)
            updated_report = await update_bug_report_async(db, report_id, update_data)
            
            if updated_report:
                await update.message.reply_text(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –æ—Ç—á–µ—Ç—É {str(report_id)[:8]}...",
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
                
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data.pop('report_id', None)
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_comment: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
        return ConversationHandler.END


async def delete_report(update: Update, context: ContextTypes.DEFAULT_TYPE, report_id: str):
    """
    –£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        query = update.callback_query
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_report_{report_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_report_{report_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç {str(report_id)[:8]}...?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=reply_markup,
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_report: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def confirm_delete_report(update: Update, context: ContextTypes.DEFAULT_TYPE, report_id: str):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞.
    """
    try:
        query = update.callback_query
        await query.answer()
        
        async for db in get_db_session():
            success = await delete_bug_report_async(db, report_id)
            
            if success:
                await query.edit_message_text(
                    f"‚úÖ –û—Ç—á–µ—Ç {str(report_id)[:8]}... —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="admin_all_reports")
                    ]]),
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_report_{report_id}")
                    ]])
                )
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_report: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")


async def show_reports_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç—á–µ—Ç–∞–º –æ–± –æ—à–∏–±–∫–∞—Ö.
    """
    try:
        query = update.callback_query
        
        async for db in get_db_session():
            stats = await get_bug_report_statistics_async(db)
            
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö\n\n"
            text += f"üìà –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {stats['total']}\n"
            text += f"üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['recent_24h']}\n\n"
            
            text += "üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
            for status, count in stats['by_status'].items():
                status_emoji = REPORT_STATUSES.get(status, "‚ùì")
                text += f"  {status_emoji} {status}: {count}\n"
                
            text += "\nüîç –ü–æ —Ç–∏–ø–∞–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤:\n"
            for incident_type, count in stats['by_incident_type'].items():
                incident_emoji = INCIDENT_TYPES.get(incident_type, "‚ùì")
                text += f"  {incident_emoji} {incident_type}: {count}\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_admin_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_reports_statistics: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def start_search_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤.
    """
    try:
        query = update.callback_query
        
        await query.edit_message_text(
            "üîç –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º):\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        return WAITING_FOR_COMMENT  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_search_reports: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
    """
    try:
        search_query = update.message.text.strip()
        
        async for db in get_db_session():
            reports = await get_bug_reports_with_filters_async(db, search_query=search_query, limit=20)
            
            if not reports:
                await update.message.reply_text(
                    f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{search_query}'\n\n"
                    "–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
                    ]])
                )
                return ConversationHandler.END
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{search_query}'\n\n"
            
            keyboard = []
            for i, report in enumerate(reports, 1):
                status_emoji = REPORT_STATUSES.get(report.status, "‚ùì")
                incident_emoji = INCIDENT_TYPES.get(report.incident_type, "‚ùì")
                
                text += f"{i}. {status_emoji} {incident_emoji} {report.title}\n"
                text += f"   ID: {str(report.id)[:8]}... | {report.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üìÑ {report.title[:30]}...",
                    callback_data=f"view_report_{report.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_admin_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(text, reply_markup=reply_markup, )
            
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ async for
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_search: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        return ConversationHandler.END


async def cancel_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    """
    try:
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.clear()
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_admin_action: {e}")
        return ConversationHandler.END
