"""
–ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç APScheduler —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.
"""

import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram.ext import Application
import logging

logger = logging.getLogger(__name__)


class HabitReminderScheduler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """

    def __init__(self, telegram_app: Application):
        self.scheduler = AsyncIOScheduler()
        self.telegram_app = telegram_app
        self.is_running = False

    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
        """
        if not self.is_running:
            self.scheduler.start()
            self.is_running = True
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            self.scheduler.add_job(
                self.send_daily_reminders,
                CronTrigger(minute="*"),  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                id="habit_reminder_check",
            )

            # –ü—Ä–∏–º–µ—Ä: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00
            self.scheduler.add_job(
                self.check_weekly_challenges,
                CronTrigger(day_of_week="mon", hour=9, minute=0),
                id="weekly_challenge_check",
            )

    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
        """
        if self.is_running:
            self.scheduler.shutdown()
            self.is_running = False
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def send_daily_reminders(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        
        try:
            from app.core.database import get_db_session
            from app.bot.services.habit_service import get_users_with_uncompleted_daily_habits
            from datetime import date, datetime
            from app.utils.timezone_utils import is_habit_time_now, get_user_timezone
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
            async for db in get_db_session():
                users_to_notify = await get_users_with_uncompleted_daily_habits(db)
                
                if not users_to_notify:
                    logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
                    break
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.")
                
                for user_data in users_to_notify:
                    user = user_data['user']
                    uncompleted_habits = user_data['uncompleted_habits']
                    
                    if not uncompleted_habits:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if not self._should_send_reminder(user):
                        continue
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    habits_to_remind = []
                    for habit in uncompleted_habits:
                        if habit.custom_schedule_time:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            if is_habit_time_now(habit.custom_schedule_time, habit.timezone):
                                habits_to_remind.append(habit)
                        else:
                            # –î–ª—è –ø—Ä–∏–≤—ã—á–µ–∫ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                            habits_to_remind.append(habit)
                    
                    if not habits_to_remind:
                        continue
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
                    habit_names = [habit.name for habit in habits_to_remind]
                    message = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö\n\n"
                        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n"
                        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
                    )
                    
                    for i, habit_name in enumerate(habit_names, 1):
                        message += f"{i}. {habit_name}\n"
                    
                    message += f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /complete <–Ω–æ–º–µ—Ä> –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
                    
                    try:
                        await self.telegram_app.bot.send_message(
                            chat_id=user.telegram_id,
                            text=message
                        )
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    def _should_send_reminder(self, user):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        """
        from datetime import datetime
        
        frequency = user.reminder_frequency or "0"
        now = datetime.now()
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ "0" - –∫–∞–∂–¥—ã–π —á–∞—Å –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞
        if frequency == "0":
            return now.minute == 0
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –∑–∞–¥–∞–Ω–∞ –∫–∞–∫ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "*/10", "*/15", "*/30", "*/45")
        if frequency.startswith("*/"):
            try:
                interval = int(frequency[2:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ "*/"
                return now.minute % interval == 0
            except ValueError:
                return False
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ "daily_start" - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è (00:00)
        if frequency == "daily_start":
            return now.hour == 0 and now.minute == 0
        
        # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ "daily_end" - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è (18:00)
        if frequency == "daily_end":
            return now.hour == 18 and now.minute == 0
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–∞–∂–¥—ã–π —á–∞—Å
        return now.minute == 0

    async def check_weekly_challenges(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π.")
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
        # –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
        # –ü—Ä–∏–º–µ—Ä:
        # await update_weekly_challenge_progress()
        # await award_challenge_rewards()

    # –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    def add_job(self, func, trigger, id=None, **kwargs):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
        """
        self.scheduler.add_job(func, trigger, id=id, **kwargs)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID: {id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ DI –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
# scheduler_instance = None

# async def init_scheduler(telegram_app: Application):
#     """
#     –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
#     """
#     global scheduler_instance
#     scheduler_instance = HabitReminderScheduler(telegram_app)
#     await scheduler_instance.start()
#     return scheduler_instance
